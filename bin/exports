#!/bin/bash
# Script Name: generate_requirements.sh
# Check if a virtual environment path is provided, otherwise default to .venv
VENV_PATH=${1:-".venv"}

# Check if the virtual environment exists
if [ ! -d "$VENV_PATH" ]; then
    echo "Error: Virtual environment path $VENV_PATH does not exist!"
    exit 1
fi

# Check if pip is available in the virtual environment
PIP_PATH="$VENV_PATH/bin/pip"
if [ ! -f "$PIP_PATH" ]; then
    echo "Error: Could not find pip in the virtual environment!"
    exit 1
fi

# Check if python is available in the virtual environment
PYTHON_PATH="$VENV_PATH/bin/python"
if [ ! -f "$PYTHON_PATH" ]; then
    echo "Error: Could not find python in the virtual environment!"
    exit 1
fi

# -----------------------------------------------------------------------------
# Mapping table: module name  ->  package name on PyPI
# Add more pairs here when you meet other mismatches.
# -----------------------------------------------------------------------------
declare -A MODULE_TO_PACKAGE=(
    ["bs4"]="beautifulsoup4"
    ["yaml"]="PyYAML"
    ["cv2"]="opencv-python"
    ["sklearn"]="scikit-learn"
    ["PIL"]="Pillow"
    ["pil"]="Pillow"
    ["Crypto"]="pycryptodome"
    ["sklearn"]="scikit-learn"
    ["skimage"]="scikit-image"
    ["cv2"]="opencv-python"
    ["tensorflow_probability"]="tensorflow-probability"
    ["PIL"]="Pillow"
    ["pil"]="Pillow"
    ["mpl_toolkits"]="matplotlib"
    ["docx"]="python-docx"
    ["pptx"]="python-pptx"
    ["reportlab"]="reportlab"
    ["yaml"]="PyYAML"
    ["ruamel"]="ruamel.yaml"
    ["configobj"]="configobj"
    ["Crypto"]="pycryptodome"
    ["crypto"]="pycryptodome"   
    ["dotenv"]="python-dotenv"
    ["win32com"]="pywin32"
    ["serial"]="pyserial"
    ["dateutil"]="python-dateutil"
    ["pendulum"]="pendulum"
    ["googleapiclient"]="google-api-python-client"
    ["google.cloud"]="google-cloud-core"
    ["mysql"]="mysqlclient"
    ["psycopg2"]="psycopg2-binary"
)

# Temporary file to store library names
TEMP_FILE=$(mktemp)
BUILTIN_TEMP_FILE=$(mktemp)

# Get Python version from the virtual environment
PYTHON_VERSION=$("$PYTHON_PATH" --version 2>&1 | awk '{print $2}')
echo "Detected Python version: $PYTHON_VERSION"

# Get list of built-in modules for the current Python version
echo "Retrieving list of built-in modules for Python $PYTHON_VERSION..."
"$PYTHON_PATH" -c "import sys; print('\n'.join(sys.builtin_module_names))" > "$BUILTIN_TEMP_FILE"
echo "Built-in modules list retrieved."

# Find all .py files and extract imported libraries
echo "Analyzing Python files for import statements..."
find . -type f -name "*.py" -not -path "*/$VENV_PATH/*" | while read -r file; do
    # Extract library names from import and from ... import statements
    grep -E "^[[:space:]]*(import|from)[[:space:]]+[a-zA-Z0-9_]+" "$file" 2>/dev/null | \
    sed -E 's/^[[:space:]]*(import|from)[[:space:]]+//' | \
    sed -E 's/[[:space:]]+.*$//' | \
    sed -E 's/\..*$//' | \
    sort | uniq
done | sort | uniq > "$TEMP_FILE"  # Remove duplicates across all files

# Check if any libraries were found
if [ ! -s "$TEMP_FILE" ]; then
    echo "No imported libraries found!"
    rm "$TEMP_FILE" "$BUILTIN_TEMP_FILE"
    exit 0
fi

# Read library names and check their versions
echo "Checking library versions in the virtual environment..."
REQUIREMENTS_FILE="requirements.txt"
> "$REQUIREMENTS_FILE"  # Clear or create requirements.txt

# Helper associative array to avoid duplicate entries in requirements.txt
declare -A ADDED_PACKAGES

while IFS= read -r lib; do
    if [ -z "$lib" ]; then
        continue
    fi

    # Check if the library is a built-in module
    if grep -q "^$lib$" "$BUILTIN_TEMP_FILE"; then
        echo "Skipped $lib (built-in module for Python $PYTHON_VERSION)"
        continue
    fi

    # Resolve the real package name (default: same as import lib)
    pkg="${MODULE_TO_PACKAGE[$lib]:-$lib}"

    # Skip if we have already added this package
    if [ -n "${ADDED_PACKAGES[$pkg]}" ]; then
        continue
    fi

    # Use pip show to get the library version
    version=$("$PIP_PATH" show "$pkg" 2>/dev/null | grep -i "^Version:" | cut -d' ' -f2)

    if [ -n "$version" ]; then
        echo "$pkg==$version" >> "$REQUIREMENTS_FILE"
        ADDED_PACKAGES[$pkg]=1
        # Print message indicating mapping, if any
        if [ "$pkg" != "$lib" ]; then
            echo "Found $lib (package $pkg) version $version"
        else
            echo "Found $lib version $version"
        fi
    else
        echo "Skipped $lib (package $pkg) - not installed in virtual environment"
    fi
done < "$TEMP_FILE"

# Clean up temporary files
rm "$TEMP_FILE" "$BUILTIN_TEMP_FILE"
echo "requirements.txt file has been generated!"